Class {
	#name : 'MicInlineParserTest',
	#superclass : 'TestCase',
	#pools : [
		'MicMicrodownSharedPool'
	],
	#category : 'Microdown-Tests-InlineParser',
	#package : 'Microdown-Tests',
	#tag : 'InlineParser'
}

{ #category : 'method generation' }
MicInlineParserTest class >> generateAllTests [
	<script>
	| testGenerators |
	testGenerators := (self class methods select: [ :meth | meth selector beginsWith: #'generate' ])
			copyWithout: (self class >> #generateAllTests).
	testGenerators do: [ :method | method valueWithReceiver: self arguments: #() ]
]

{ #category : 'method generation' }
MicInlineParserTest class >> generateEvaluatedTests [
	| template tests|
	template := 'test{1}
	"Auto generated by self class>>#generateEvaluatedTests"
	| res |
	res := ( self inlineParse:''{2}aaaa{3}'') first.
	self assert: res printString equals: ({4} new children: \{ MicTextBlock2 new bodystring: ''aaaa''\}) printString
	'.
	tests := { 
		{ 'Bold'. BoldMarkup. BoldMarkup. 'MicBoldFormatBlock2'}.
		{ 'Italic'. ItalicMarkup. ItalicMarkup. 'MicItalicFormatBlock2' }.
		{ 'Strike'. StrikeMarkup. StrikeMarkup. 'MicStrikeFormatBlock2'  }
	 }.
	^ tests do: [ :t | self compile: (template format: t ) classified: 'test generated']
	
]

{ #category : 'method generation' }
MicInlineParserTest class >> generateEvaluatedTests_BackslashNotNested [
	| template tests|
	template := 'test{1}_BackslashNotNested
	"Auto generated by self class>>#generateEvaluatedTests_BackslashNotNested"
	| res |
	res := ( self inlineParse:''{2}aa\\{4}bbbb{5}cc{3}'') first.
	self assert: res printString equals: ({6} new children: \{
		MicTextBlock2 new bodystring: ''aa{4}bbbb{5}cc'' \}) printString
	'.
	tests := { 
		{ 'Bold'. BoldMarkup. BoldMarkup. ItalicMarkup. ItalicMarkup. 'MicBoldFormatBlock2'}.
		{ 'Italic'. ItalicMarkup. ItalicMarkup. StrikeMarkup.StrikeMarkup. 'MicItalicFormatBlock2'}.
		{ 'Strike'. StrikeMarkup. StrikeMarkup. BoldMarkup. BoldMarkup. 'MicStrikeFormatBlock2' }
	 }.
	^ tests do: [ :t | self compile: (template format: t ) classified: 'test generated']
	
]

{ #category : 'method generation' }
MicInlineParserTest class >> generateEvaluatedTests_Nested [
	| template tests|
	template := 'test{1}_Nested
	"Auto generated by self class>>#generateEvaluatedTests_Nested"
	| res |
	res := ( self inlineParse:''{2}aa{4}bbbb{5}cc{3}'') first.
	self assert: res printString equals: ({6} new children: \{
		MicTextBlock2 new bodystring: ''aa''.
		{7} new children: \{ MicTextBlock2 new bodystring: ''bbbb''\}.
		MicTextBlock2 new bodystring: ''cc''
		\}) printString
	'.
	tests := { 
		{ 'Bold'. BoldMarkup. BoldMarkup. ItalicMarkup. ItalicMarkup. 'MicBoldFormatBlock2'. 'MicItalicFormatBlock2'}.
		{ 'Italic'. ItalicMarkup. ItalicMarkup. StrikeMarkup.StrikeMarkup. 'MicItalicFormatBlock2'. 'MicStrikeFormatBlock2'}.
		{ 'Strike'. StrikeMarkup. StrikeMarkup. BoldMarkup. BoldMarkup. 'MicStrikeFormatBlock2'. 'MicBoldFormatBlock2'  }
	 }.
	^ tests do: [ :t | self compile: (template format: t ) classified: 'test generated']
	
]

{ #category : 'method generation' }
MicInlineParserTest class >> generateEvaluatedTests_UnclompletedNested [
	| template tests|
	template := 'test{1}_UnclompletedNested
	"Auto generated by self class>>#generateEvaluatedTests_UnclompletedNested"
	| res |
	res := ( self inlineParse:''{2}aa{4}bbbbcc{3}'') first.
	self assert: res printString equals: ({5} new children: \{
		MicTextBlock2 new bodystring: ''aa{4}bbbbcc'' \}) printString
	'.
	tests := { 
		{ 'Bold'. BoldMarkup. BoldMarkup. ItalicMarkup. MicBoldFormatBlock}.
		{ 'Italic'. ItalicMarkup. ItalicMarkup. StrikeMarkup. MicItalicFormatBlock}.
		{ 'Strike'. StrikeMarkup. StrikeMarkup. BoldMarkup. MicStrikeFormatBlock }
	 }.
	^ tests do: [ :t | self compile: (template format: t ) classified: 'test generated']
	
]

{ #category : 'method generation' }
MicInlineParserTest class >> generateUnEvaluated [
	| template tests|
	template := 'test{1}
	"Auto generated by self class>>#generateUnEvaluated"
	| res |
	res := self inlineParse: {2}.
	self assert: res first printString equals: ''{1}(bbbb)'' '.
	tests := { 
		{ 'AnchorReference'. (AnchorReferenceOpenerMarkup , 'bbbb',AnchorReferenceCloserMarkup ) printString}.
		{ 'Annotation'. (AnnotationOpenerMarkup, 'bbbb',AnnotationCloserMarkup ) printString}.
		{ 'MathInline'. (MathMarkup, 'bbbb',MathMarkup   ) printString}.
		{ 'Monospace'. (MonospaceMarkup, 'bbbb',MonospaceMarkup  ) printString}.
		{ 'Raw'. (RawOpenerMarkup, 'bbbb',RawCloserMarkup  ) printString}
	 }.
	^ tests do: [ :t | self compile: (template format: t ) classified: 'test generated']
	
]

{ #category : 'method generation' }
MicInlineParserTest class >> generateUnEvaluated_backSlashed [
	| template tests|
	template := 'test{1}_backSlashed
	"Auto generated by self class>>#generateUnEvaluated_backSlashed"
	| res |
	res := self inlineParse: ''{2}bb\\xccc\\{3}cccbb{3}''.
	self assert: res first printString equals: ''{1}(bb\\xccc{3}cccbb)'' '.
	tests := { 
		{ 'AnchorReference'. AnchorReferenceOpenerMarkup. AnchorReferenceCloserMarkup}.
		{ 'Annotation'. AnnotationOpenerMarkup. AnnotationCloserMarkup}.
		{ 'MathInline'.MathMarkup. MathMarkup}.
		{ 'Monospace'. MonospaceMarkup. MonospaceMarkup}.
		{ 'Raw'. RawOpenerMarkup. RawCloserMarkup}
	 }.
	^ tests do: [ :t | self compile: (template format: t ) classified: 'test generated']
	
]

{ #category : 'method generation' }
MicInlineParserTest class >> generateUnEvaluated_unevaluated [
	| template tests|
	template := 'test{1}_unevaluated
	"Auto generated by self class>>#generateUnEvaluated_unevaluated"
	| res |
	res := self inlineParse:''{2}bb**ccc**bb{3}''.
	self assert: res first printString equals: ''{1}(bb**ccc**bb)'' '.
	tests := { 
		{ 'AnchorReference'. AnchorReferenceOpenerMarkup. AnchorReferenceCloserMarkup}.
		{ 'Annotation'. AnnotationOpenerMarkup. AnnotationCloserMarkup}.
		{ 'MathInline'.MathMarkup. MathMarkup}.
		{ 'Monospace'. MonospaceMarkup. MonospaceMarkup}.
		{ 'Raw'. RawOpenerMarkup. RawCloserMarkup}
	 }.
	^ tests do: [ :t | self compile: (template format: t ) classified: 'test generated']
	
]

{ #category : 'method generation' }
MicInlineParserTest class >> generateUrlTests [
	| template tests|
	template := 'test{1}
	"Auto generated by self class>>#generateUrlTests"
	| res |
	res := ( self inlineParse: {2}) first.
	self assert: res printString equals: (
		Mic{1}Block2 new 
			children: \{ MicTextBlock2 new bodystring: ''aaaa''\}; url: ''bbb'' ) printString'.
	tests := { 
		{ 'Link'. (LinkNameOpenerMarkup, 'aaaa',NameCloserUrlOpener, 'bbb', URLCloserMarkup) printString}.
		{ 'Figure'. (FigureNameOpenerMarkup, 'aaaa',NameCloserUrlOpener, 'bbb', URLCloserMarkup) printString}.
	 }.
	^ tests do: [ :t | self compile: (template format: t ) classified: 'test generated']
	
]

{ #category : 'method generation' }
MicInlineParserTest class >> generateUrlTests_Refs [
	| template tests|
	template := 'test{1}_Refs
	"Auto generated by self class>>#generateUrlTests_Refs"
	| res |
	res := ( self inlineParse: {2}) first.
	self assert: res reference class equals: MicRelativeResourceReference.
	self assert: res reference path equals: ''bbb'' '.
	tests := { 
		{ 'Link'. (LinkNameOpenerMarkup, 'aaaa',NameCloserUrlOpener, 'bbb', URLCloserMarkup) printString}.
		{ 'Figure'. (FigureNameOpenerMarkup, 'aaaa',NameCloserUrlOpener, 'bbb', URLCloserMarkup) printString}.
	 }.
	^ tests do: [ :t | self compile: (template format: t ) classified: 'test generated']
	
]

{ #category : 'public' }
MicInlineParserTest >> inlineParse: string [
	^ MicInlineParser parse: string
]

{ #category : 'test generated' }
MicInlineParserTest >> testAnchorReference [
	"Auto generated by self class>>#generateUnEvaluated"
	| res |
	res := self inlineParse: '*@bbbb@*'.
	self assert: res first printString equals: 'AnchorReference(bbbb)' 
]

{ #category : 'test generated' }
MicInlineParserTest >> testAnchorReference_backSlashed [
	"Auto generated by self class>>#generateUnEvaluated_backSlashed"
	| res |
	res := self inlineParse: '*@bb\xccc\@*cccbb@*'.
	self assert: res first printString equals: 'AnchorReference(bb\xccc@*cccbb)' 
]

{ #category : 'test generated' }
MicInlineParserTest >> testAnchorReference_unevaluated [
	"Auto generated by self class>>#generateUnEvaluated_unevaluated"
	| res |
	res := self inlineParse:'*@bb**ccc**bb@*'.
	self assert: res first printString equals: 'AnchorReference(bb**ccc**bb)' 
]

{ #category : 'test generated' }
MicInlineParserTest >> testAnnotation [
	"Auto generated by self class>>#generateUnEvaluated"
	| res |
	res := self inlineParse: '{!bbbb!}'.
	self assert: res first printString equals: 'Annotation(bbbb)' 
]

{ #category : 'test generated' }
MicInlineParserTest >> testAnnotation_backSlashed [
	"Auto generated by self class>>#generateUnEvaluated_backSlashed"
	| res |
	res := self inlineParse: '{!bb\xccc\!}cccbb!}'.
	self assert: res first printString equals: 'Annotation(bb\xccc!}cccbb)' 
]

{ #category : 'test generated' }
MicInlineParserTest >> testAnnotation_unevaluated [
	"Auto generated by self class>>#generateUnEvaluated_unevaluated"
	| res |
	res := self inlineParse:'{!bb**ccc**bb!}'.
	self assert: res first printString equals: 'Annotation(bb**ccc**bb)' 
]

{ #category : 'test generated' }
MicInlineParserTest >> testBold [
	"Auto generated by self class>>#generateEvaluatedTests"

	| res |
	res := (self inlineParse: '**aaaa**') first.
	self
		assert: res printString
		equals: (MicBoldFormatBlock new children:
				 { (MicTextBlock new bodyString: 'aaaa') }) printString
]

{ #category : 'test generated' }
MicInlineParserTest >> testBold_BackslashNotNested [
	"Auto generated by self class>>#generateEvaluatedTests_BackslashNotNested"

	| res |
	res := (self inlineParse: '**aa\_bbbb_cc**') first.
	self
		assert: res printString
		equals: (MicBoldFormatBlock new children:
				 { (MicTextBlock new bodyString: 'aa_bbbb_cc') }) printString
]

{ #category : 'test generated' }
MicInlineParserTest >> testBold_Nested [
	"Auto generated by self class>>#generateEvaluatedTests_Nested"

	| res |
	res := (self inlineParse: '**aa_bbbb_cc**') first.
	self
		assert: res printString
		equals: (MicBoldFormatBlock new children: {
					 (MicTextBlock new bodyString: 'aa').
					 (MicItalicFormatBlock new children:
						  { (MicTextBlock new bodyString: 'bbbb') }).
					 (MicTextBlock new bodyString: 'cc') }) printString
]

{ #category : 'test generated' }
MicInlineParserTest >> testBold_UnclompletedNested [
	"Auto generated by self class>>#generateEvaluatedTests_UnclompletedNested"

	| res |
	res := (self inlineParse: '**aa_bbbbcc**') first.
	self
		assert: res printString
		equals: (MicBoldFormatBlock new children:
				 { (MicTextBlock new bodyString: 'aa_bbbbcc') }) printString
]

{ #category : 'tests' }
MicInlineParserTest >> testBrokenNestedBlocksHandles [
	| res |
	res := (self inlineParse: '![[aaaa]bbb)](ccc)sss![[aaaa](bbb](ccc)').
	self assert: res printString equals: 'an Array(Text(![) Link{ Text(aaaa]bbb)) }(ccc) Text(sss![) Link{ Text(aaaa) }(bbb](ccc))'
]

{ #category : 'test generated' }
MicInlineParserTest >> testFigure [
	"Auto generated by self class>>#generateUrlTests"

	| res |
	res := (self inlineParse: '![aaaa](bbb)') first.
	self assert: res printString equals: (MicFigureBlock new
			 children: { (MicTextBlock new bodyString: 'aaaa') };
			 url: 'bbb') printString
]

{ #category : 'test generated' }
MicInlineParserTest >> testFigure_Refs [
	"Auto generated by self class>>#generateUrlTests_Refs"
	| res |
	res := ( self inlineParse: '![aaaa](bbb)') first.
	self assert: res reference class equals: MicRelativeResourceReference.
	self assert: res reference path equals: 'bbb' 
]

{ #category : 'test generated' }
MicInlineParserTest >> testItalic [
	"Auto generated by self class>>#generateEvaluatedTests"

	| res |
	res := (self inlineParse: '_aaaa_') first.
	self
		assert: res printString
		equals: (MicItalicFormatBlock new children:
				 { (MicTextBlock new bodyString: 'aaaa') }) printString
]

{ #category : 'test generated' }
MicInlineParserTest >> testItalic_BackslashNotNested [
	"Auto generated by self class>>#generateEvaluatedTests_BackslashNotNested"

	| res |
	res := (self inlineParse: '_aa\~bbbb~cc_') first.
	self
		assert: res printString
		equals: (MicItalicFormatBlock new children:
				 { (MicTextBlock new bodyString: 'aa~bbbb~cc') }) printString
]

{ #category : 'test generated' }
MicInlineParserTest >> testItalic_Nested [
	"Auto generated by self class>>#generateEvaluatedTests_Nested"

	| res |
	res := (self inlineParse: '_aa~bbbb~cc_') first.
	self
		assert: res printString
		equals: (MicItalicFormatBlock new children: {
					 (MicTextBlock new bodyString: 'aa').
					 (MicStrikeFormatBlock new children:
						  { (MicTextBlock new bodyString: 'bbbb') }).
					 (MicTextBlock new bodyString: 'cc') }) printString
]

{ #category : 'test generated' }
MicInlineParserTest >> testItalic_UnclompletedNested [
	"Auto generated by self class>>#generateEvaluatedTests_UnclompletedNested"

	| res |
	res := (self inlineParse: '_aa~bbbbcc_') first.
	self
		assert: res printString
		equals: (MicItalicFormatBlock new children:
				 { (MicTextBlock new bodyString: 'aa~bbbbcc') }) printString
]

{ #category : 'test generated' }
MicInlineParserTest >> testLink [
	"Auto generated by self class>>#generateUrlTests"

	| res |
	res := (self inlineParse: '[aaaa](bbb)') first.
	self assert: res printString equals: (MicLinkBlock new
			 children: { (MicTextBlock new bodyString: 'aaaa') };
			 url: 'bbb') printString
]

{ #category : 'test generated' }
MicInlineParserTest >> testLink_Refs [
	"Auto generated by self class>>#generateUrlTests_Refs"
	| res |
	res := ( self inlineParse: '[aaaa](bbb)') first.
	self assert: res reference class equals: MicRelativeResourceReference.
	self assert: res reference path equals: 'bbb' 
]

{ #category : 'test generated' }
MicInlineParserTest >> testMathInline [
	"Auto generated by self class>>#generateUnEvaluated"
	| res |
	res := self inlineParse: '$bbbb$'.
	self assert: res first printString equals: 'MathInline(bbbb)' 
]

{ #category : 'test generated' }
MicInlineParserTest >> testMathInline_backSlashed [
	"Auto generated by self class>>#generateUnEvaluated_backSlashed"
	| res |
	res := self inlineParse: '$bb\xccc\$cccbb$'.
	self assert: res first printString equals: 'MathInline(bb\xccc$cccbb)' 
]

{ #category : 'test generated' }
MicInlineParserTest >> testMathInline_unevaluated [
	"Auto generated by self class>>#generateUnEvaluated_unevaluated"
	| res |
	res := self inlineParse:'$bb**ccc**bb$'.
	self assert: res first printString equals: 'MathInline(bb**ccc**bb)' 
]

{ #category : 'test generated' }
MicInlineParserTest >> testMonospace [
	"Auto generated by self class>>#generateUnEvaluated"
	| res |
	res := self inlineParse: '`bbbb`'.
	self assert: res first printString equals: 'Monospace(bbbb)' 
]

{ #category : 'test generated' }
MicInlineParserTest >> testMonospace_backSlashed [
	"Auto generated by self class>>#generateUnEvaluated_backSlashed"
	| res |
	res := self inlineParse: '`bb\xccc\`cccbb`'.
	self assert: res first printString equals: 'Monospace(bb\xccc`cccbb)' 
]

{ #category : 'test generated' }
MicInlineParserTest >> testMonospace_unevaluated [
	"Auto generated by self class>>#generateUnEvaluated_unevaluated"
	| res |
	res := self inlineParse:'`bb**ccc**bb`'.
	self assert: res first printString equals: 'Monospace(bb**ccc**bb)' 
]

{ #category : 'tests' }
MicInlineParserTest >> testNestedBlocksWithUrl [
	| res |
	res := (self inlineParse: '[![aaaa](bbb)](ccc)   ![[aaaa](bbb)](ccc)').
	self assert: res first printString equals: 'Link{ Figure{ Text(aaaa) }(bbb) }(ccc)'.
	self assert: res third printString equals: 'Figure{ Link{ Text(aaaa) }(bbb) }(ccc)'
]

{ #category : 'test generated' }
MicInlineParserTest >> testRaw [
	"Auto generated by self class>>#generateUnEvaluated"
	| res |
	res := self inlineParse: '{{bbbb}}'.
	self assert: res first printString equals: 'Raw(bbbb)' 
]

{ #category : 'test generated' }
MicInlineParserTest >> testRaw_backSlashed [
	"Auto generated by self class>>#generateUnEvaluated_backSlashed"
	| res |
	res := self inlineParse: '{{bb\xccc\}}cccbb}}'.
	self assert: res first printString equals: 'Raw(bb\xccc}}cccbb)' 
]

{ #category : 'test generated' }
MicInlineParserTest >> testRaw_unevaluated [
	"Auto generated by self class>>#generateUnEvaluated_unevaluated"
	| res |
	res := self inlineParse:'{{bb**ccc**bb}}'.
	self assert: res first printString equals: 'Raw(bb**ccc**bb)' 
]

{ #category : 'test generated' }
MicInlineParserTest >> testStrike [
	"Auto generated by self class>>#generateEvaluatedTests"

	| res |
	res := (self inlineParse: '~aaaa~') first.
	self
		assert: res printString
		equals: (MicStrikeFormatBlock new children:
				 { (MicTextBlock new bodyString: 'aaaa') }) printString
]

{ #category : 'test generated' }
MicInlineParserTest >> testStrike_BackslashNotNested [
	"Auto generated by self class>>#generateEvaluatedTests_BackslashNotNested"

	| res |
	res := (self inlineParse: '~aa\**bbbb**cc~') first.
	self
		assert: res printString
		equals: (MicStrikeFormatBlock new children:
				 { (MicTextBlock new bodyString: 'aa**bbbb**cc') }) printString
]

{ #category : 'test generated' }
MicInlineParserTest >> testStrike_Nested [
	"Auto generated by self class>>#generateEvaluatedTests_Nested"

	| res |
	res := (self inlineParse: '~aa**bbbb**cc~') first.
	self
		assert: res printString
		equals: (MicStrikeFormatBlock new children: {
					 (MicTextBlock new bodyString: 'aa').
					 (MicBoldFormatBlock new children:
						  { (MicTextBlock new bodyString: 'bbbb') }).
					 (MicTextBlock new bodyString: 'cc') }) printString
]

{ #category : 'test generated' }
MicInlineParserTest >> testStrike_UnclompletedNested [
	"Auto generated by self class>>#generateEvaluatedTests_UnclompletedNested"

	| res |
	res := (self inlineParse: '~aa**bbbbcc~') first.
	self
		assert: res printString
		equals: (MicStrikeFormatBlock new children:
				 { (MicTextBlock new bodyString: 'aa**bbbbcc') }) printString
]

{ #category : 'tests' }
MicInlineParserTest >> testText [
	| res |
	res := self inlineParse: 'bbbb'.
	self assert: res first printString equals: 'Text(bbbb)'
]

{ #category : 'tests' }
MicInlineParserTest >> testText_backSlashed [
	| res |
	res := self inlineParse: 'bb\xbb'.
	self assert: res first printString equals: 'Text(bbxbb)'
]

{ #category : 'tests' }
MicInlineParserTest >> testText_isEvaluated [
	| res |
	res := self inlineParse: 'bb**cccc**bb'.
	self assert: res printString equals: 'an Array(Text(bb) BoldFormat{ Text(cccc) } Text(bb))'
]
