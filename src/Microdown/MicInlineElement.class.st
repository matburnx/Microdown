"
I am an inline block generated by inline splitter, to parse inline text.

I am characterized by:
- start & end: locations of my opener & closer delimiters in initial string
- substring: concerned text (without delimiters so)
- kind: my type, symbol which must be the same than my relative delimiter type (#basic for normal text)
- children: array in case of nested inline blocks


"
Class {
	#name : 'MicInlineElement',
	#superclass : 'MicElement',
	#category : 'Microdown-Model',
	#package : 'Microdown',
	#tag : 'Model'
}

{ #category : 'accessing' }
MicInlineElement class >> blockName [
	^ (self instanceSide name asString withoutPrefix: 'Mic') withoutSuffix: 'Block'
]

{ #category : 'accessing' }
MicInlineElement class >> closingDelimiter [
	^ self subclassResponsibility
]

{ #category : 'testing' }
MicInlineElement class >> isEvaluated [
	^ true
]

{ #category : 'accessing' }
MicInlineElement class >> openingDelimiter [
	^ self subclassResponsibility
]

{ #category : 'accessing' }
MicInlineElement >> blockName [
	^ self class blockName
]

{ #category : 'visiting' }
MicInlineElement >> closeMe [
	"use for post parsing initialization"
	
	
]

{ #category : 'accessing' }
MicInlineElement >> closingDelimiter [ 
	^ self class closingDelimiter
]

{ #category : 'private' }
MicInlineElement >> inlineParserClass [

	^ MicInlineParser
]

{ #category : 'accessing' }
MicInlineElement >> kind [
	"Should only be used for tests"
	self deprecated: 'use blockName instead' transformWith: '`@rec kind' -> '`@rec blockName asLowercase'.
	^ self blockName asLowercase 
]

{ #category : 'accessing' }
MicInlineElement >> openingDelimiter [
	^ self class openingDelimiter
]
